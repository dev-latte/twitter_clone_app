{"version":3,"sources":["fbInstance.js","components/AuthForm.js","routes/Auth.js","components/Tweet.js","components/TweetFactory.js","routes/Home.js","routes/Profile.js","components/Navigation.js","components/Router.js","components/App.js","index.js"],"names":["firebase","initializeApp","apiKey","process","authDomain","projectId","storageBucket","messagingSenderId","appId","firebaseInstance","authService","auth","dbService","firestore","storageService","storage","AuthForm","useState","email","setEmail","password","setPassword","error","setError","newAccount","setNewAccount","onChange","e","target","name","value","onSubmit","a","preventDefault","createUserWithEmailAndPassword","signInWithEmailAndPassword","message","className","type","placeholder","required","onClick","prev","Auth","onSocialClick","provider","GoogleAuthProvider","GithubAuthProvider","TwitterAuthProvider","signInWithPopup","icon","faTwitter","color","size","style","marginBottom","faGoogle","Tweet","tweetObj","isOwner","editTweet","setEditTweet","text","newTweet","setNewTweet","onDeleteClick","window","confirm","doc","id","delete","refFromURL","imageFileUrl","toggleEditTweet","update","autoFocus","src","alt","faTrash","faPencilAlt","TweetFactory","userObj","tweet","setTweet","imageFile","setImageFile","imageFileRef","ref","child","uid","uuidv4","putString","response","getDownloadURL","createDate","Date","now","collection","add","maxLength","htmlFor","faPlus","accept","file","files","reader","FileReader","onload","finishedEvent","result","currentTarget","readAsDataURL","opacity","backgroundImage","faTimes","Home","tweets","setTweets","useEffect","onSnapshot","snap","tweetArray","docs","map","data","sort","b","marginTop","Profile","refreshUser","history","useHistory","displayName","newDisplayName","setNewDisplayName","getMyTweet","where","orderBy","get","updateProfile","console","log","signOut","push","Navigation","display","justifyContent","to","marginRight","marginLeft","flexDirection","alignItems","fontSize","faUser","AppRouter","isLoggedIn","maxWidth","width","margin","exact","path","App","init","setInit","setUserObj","onAuthStateChanged","user","args","currentUser","Boolean","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1d451951.chunk.js","sourcesContent":["// Import the functions you need from the SDKs you need\nimport firebase from \"firebase/compat/app\"\nimport \"firebase/compat/auth\"\nimport \"firebase/compat/firestore\"\nimport \"firebase/compat/storage\"\n// TODO: Add SDKs for Firebase products that you want to use\n// https://firebase.google.com/docs/web/setup#available-libraries\n\n// Your web app's Firebase configuration\nconst firebaseConfig = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_APP_ID\n};\n\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport const firebaseInstance = firebase;\nexport const authService = firebase.auth();\nexport const dbService = firebase.firestore();\nexport const storageService = firebase.storage();","import { authService } from \"fbInstance\";\nimport React, { useState } from \"react\";\n\nconst AuthForm = () => {\n    const [email, setEmail] = useState(\"\");\n    const [password, setPassword] = useState(\"\");\n    const [error, setError] = useState(\"\");\n    const [newAccount, setNewAccount] = useState(true); \n\n    const toggleAccount = () => setNewAccount(prev => !prev);\n\n    const onChange = (e) => {\n        const {target: {name, value}} = e;\n        if(name === \"email\") setEmail(value);\n        else if(name === \"password\") setPassword(value);\n    };\n    \n    const onSubmit = async (e) => {\n        e.preventDefault();\n        try{\n            if(newAccount) {\n                // create account\n                await authService.createUserWithEmailAndPassword(email, password);\n            } else {\n                // log in\n                await authService.signInWithEmailAndPassword(email, password);\n            }\n        }catch(error){\n            setError(error.message);\n        }\n    };\n\n    return (\n        <>\n        <form onSubmit={onSubmit} className=\"container\">\n            <input \n                type=\"email\" \n                name=\"email\" \n                placeholder=\"E-mail\" \n                required \n                value={email}\n                onChange={onChange}\n                className=\"authInput\"\n            />\n            <input \n                type=\"password\" \n                name=\"password\"\n                placeholder=\"Password\"\n                required\n                value={password}\n                onChange={onChange}\n                className=\"authInput\"\n            />\n            <input\n                type=\"submit\" \n                value={newAccount ? \"Create Account\" : \"Log In\"} \n                className=\"authInput authSubmit\"\n            />\n            {error && <span className=\"authError\">{error}</span>}\n            <span onClick={toggleAccount} className=\"authSwitch\">\n                {newAccount ? \"Sign In\" : \"create Account\"}\n            </span>\n        </form>\n        </>\n    )\n} \n\nexport default AuthForm;","import { faGithub, faGoogle, faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport AuthForm from \"components/AuthForm\";\nimport { authService, firebaseInstance } from \"fbInstance\";\nimport React from \"react\";\n\nconst Auth = () => {\n    const onSocialClick = async (e) => {\n        const {\n            target: {name}\n        } = e;\n\n        let provider;\n\n        if(name === \"google\") {\n            provider = new firebaseInstance.auth.GoogleAuthProvider();\n        } else if(name === \"github\") {\n            provider = new firebaseInstance.auth.GithubAuthProvider();\n        } else if(name === \"twitter\") {\n            provider = new firebaseInstance.auth.TwitterAuthProvider();\n        }\n        await authService.signInWithPopup(provider);\n    };\n\n    return (\n        <div className=\"authContainer\">\n            <FontAwesomeIcon\n                icon={faTwitter}\n                color={\"#04AAFF\"}\n                size=\"3x\"\n                style={{ marginBottom: 30 }}\n            />\n            <AuthForm />\n            <div className=\"authBtns\">\n                <button name=\"google\" onClick={onSocialClick} className=\"authBtn\">\n                    Continue with Google <FontAwesomeIcon icon={faGoogle} />\n                </button>\n                <button name=\"twitter\" onClick={onSocialClick} className=\"authBtn\">\n                    Continue with Twitter <FontAwesomeIcon icon={faTwitter} />\n                </button>\n            </div>\n        </div>\n    );\n}\nexport default Auth;","import { faPencilAlt, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nimport { dbService, storageService } from \"fbInstance\";\nimport React, { useState } from \"react\";\n\nconst Tweet = ({ tweetObj, isOwner }) => {\n    const [editTweet, setEditTweet] = useState(false);\n    const [newTweet, setNewTweet] = useState(tweetObj.text);\n\n    const onDeleteClick = async() => {\n        const ok = window.confirm(\"Are you sure you want to delete this tweet?\");\n        if(ok){\n            await dbService.doc(`tweets/${tweetObj.id}`).delete();\n            await storageService.refFromURL(tweetObj.imageFileUrl).delete();\n        }\n    };\n\n    const toggleEditTweet = () => setEditTweet((prev) => !prev);\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        await dbService.doc(`tweets/${tweetObj.id}`).update({\n            text: newTweet,\n        });\n        setEditTweet(false);\n    }\n\n    const onChange = (e) => {\n        const {target: {value}} = e;\n        setNewTweet(value);\n    };\n\n    return (\n        <div className=\"tweet\">\n            { editTweet ? (\n                <>\n                    { isOwner && (\n                        <>\n                            <form onSubmit={onSubmit} className=\"container tweetEdit\">\n                                <input \n                                    type=\"text\" \n                                    placeholder=\"Edit Your Tweet\" \n                                    onChange={onChange} \n                                    value={newTweet} \n                                    required\n                                    autoFocus\n                                    className=\"formInput\"\n                                />\n                                <input type=\"submit\" value=\"Update Tweet\" className=\"formBtn\"/>\n                            </form> \n                            <span onClick={toggleEditTweet} className=\"formBtn cancelBtn\">\n                                Cancel  \n                            </span>\n                        </>\n                    )}\n                </>\n            ) : (\n                <>\n                    <h4>{tweetObj.text}</h4>\n                    {tweetObj.imageFileUrl && <img src={tweetObj.imageFileUrl} alt=\"uploading img\"/>}\n                    {isOwner && (\n                        <div className=\"tweet_actions\">\n                            <span onClick={onDeleteClick}>\n                                <FontAwesomeIcon icon={faTrash} />\n                            </span>\n                            <span onClick={toggleEditTweet}>\n                                <FontAwesomeIcon icon={faPencilAlt} />\n                            </span>\n                        </div>\n                    )}\n                </>\n            )}\n        </div>\n    )\n};\nexport default Tweet;","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\"\nimport { storageService, dbService } from \"fbInstance\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTimes } from \"@fortawesome/free-solid-svg-icons\";\n\nconst TweetFactory = ({ userObj }) => {\n    const [tweet, setTweet] = useState(\"\");\n    const [imageFile, setImageFile] = useState(\"\");\n\n    const onSubmit = async (e) => {\n        if(tweet === \"\") {\n            return;\n        }\n\n        e.preventDefault();\n        let imageFileUrl = \"\";\n        if(imageFile !== \"\"){\n            const imageFileRef = storageService.ref().child(`${userObj.uid}/${uuidv4()}`);\n            const response = await imageFileRef.putString(imageFile, \"data_url\");\n            imageFileUrl = await response.ref.getDownloadURL();\n        }\n        const tweetObj = {\n            text: tweet,\n            uid: userObj.uid, \n            createDate: Date.now(),\n            imageFileUrl\n        };\n        await dbService.collection(\"tweets\").add(tweetObj);\n        setTweet(\"\");\n        setImageFile(\"\");\n    }\n    \n    const onChange = (e) => {\n        const {\n            target: { value },\n        } = e;\n        setTweet(value);\n    }\n\n    const onImgaeChange = (e) => {\n        const { target: {files} } = e;\n        const file = files[0];\n        const reader = new FileReader();\n        reader.onload = (finishedEvent) => {\n            const {currentTarget: { result } } = finishedEvent;\n            setImageFile(result);\n        };\n        reader.readAsDataURL(file);\n    }\n\n    const onClearImageFile = () => setImageFile(\"\");\n\n\n    return (\n    <form onSubmit={onSubmit} className=\"factoryForm\">\n        <div className=\"factoryInput__container\">\n            <input \n                value={tweet}\n                onChange={onChange}\n                type=\"text\"\n                placeholder=\"What's on your mind?\"\n                maxLength={120}\n            />\n            <input type=\"submit\" value=\"&rarr;\" className=\"factoryInput__arrow\" />\n        </div>\n\n        <label htmlFor=\"image-file\" className=\"factoryInput__label\">\n            <span>Add photos</span>\n            <FontAwesomeIcon icon={faPlus} />\n        </label>\n\n        <input \n            id=\"image-file\"\n            type=\"file\"\n            accept=\"image/*\"\n            onChange={onImgaeChange}\n            style={{\n                opacity : 0\n            }}\n        />\n        { imageFile && (\n            <div className=\"factoryForm__imageFile\">\n                <img\n                    src={imageFile}\n                    style={{\n                        backgroundImage: imageFile\n                    }}\n                    alt=\"test\"\n                />\n\n                <div className=\"factoryForm__clear\" onClick={onClearImageFile}>\n                    <span>Remove</span>\n                    <FontAwesomeIcon icon={faTimes} />\n                </div>\n            </div>\n        )}\n    </form>\n    )\n};\n\nexport default TweetFactory;","import Tweet from \"components/Tweet\";\nimport TweetFactory from \"components/TweetFactory\";\nimport { dbService } from \"fbInstance\";\nimport React, { useEffect, useState } from \"react\";\n\nconst Home = ({ userObj }) => {\n    const [tweets, setTweets] = useState([]);\n\n    useEffect(() => {\n        dbService.collection(\"tweets\").onSnapshot((snap) => {\n            const tweetArray = snap.docs.map(doc => ({\n                id : doc.id,\n                ...doc.data()\n            }));\n            tweetArray.sort((a, b) => b.createDate - a.createDate);\n            setTweets(tweetArray);\n        });\n    }, []);\n\n    return (\n        <div className=\"container\">\n            <TweetFactory userObj={userObj}></TweetFactory>\n            <div style={{ marginTop: 30 }}>\n                {tweets.map(tweet => \n                    <Tweet key={tweet.id} tweetObj={tweet} isOwner={tweet.uid === userObj.uid}/>\n                )}\n            </div>\n        </div>\n    );\n};\nexport default Home;","import { authService, dbService } from \"fbInstance\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Profile = ({ refreshUser, userObj }) => {\n    const history = useHistory();\n    const [newDisplayName, setNewDisplayName] = useState(userObj.displayName);\n    const onLogoutClick = () => {\n        authService.signOut();\n        console.log(\"logout\");\n        history.push(\"/\");\n    };\n    \n    const getMyTweet = async () => {\n       await dbService\n                .collection(\"tweets\")\n                .where(\"uid\", \"==\", userObj.uid)\n                .orderBy(\"createDate\", \"desc\")\n                .get();\n    }\n\n    useEffect(() => {\n        getMyTweet();\n    }, []);\n\n    const onChange = (e) => { \n        const {\n            target: { value }\n        } = e;\n        console.log(value);\n        setNewDisplayName(value);\n    }\n\n    const onSubmit = async (e) => {\n        e.preventDefault();\n        if(userObj.displayName !== newDisplayName) {\n            await userObj.updateProfile({displayName: newDisplayName,});\n            refreshUser();\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={onSubmit} className=\"profileForm\">\n                <input \n                    onChange={ onChange }\n                    type=\"text\" \n                    placeholder=\"Display Name\"\n                    value={newDisplayName}\n                    autoFocus\n                    className=\"formInput\"\n                />\n                <input \n                    type=\"submit\"\n                    value=\"Update Profile\"\n                    className=\"formBtn\"\n                    style={{ marginTop: 10 }}\n                />\n            </form>\n            <span className=\"formBtn cancelBtn logOut\" onClick={onLogoutClick}>\n                Log Out\n            </span>\n        </div>\n    )\n\n};\nexport default Profile;","import { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\nimport { faUser } from \"@fortawesome/free-regular-svg-icons\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\nimport {Link} from \"react-router-dom\";\n\nconst Navigation = ({ userObj }) => (\n    <nav>\n        <ul style={{ display: \"flex\", justifyContent: \"center\", marginTop: 50 }}>\n            <li>\n                <Link to=\"/\" style={{ marginRight: 10 }}>\n                    <FontAwesomeIcon icon={faTwitter} color={\"#04AAFF\"} size=\"2x\" />\n                </Link>\n            </li>\n            <li>\n                <Link \n                    to=\"/profile\"\n                    style={{\n                        marginLeft: 10,\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        alignItems: \"center\",\n                        fontSize: 12\n                    }}\n                >\n                    <FontAwesomeIcon icon={faUser} color={\"#04AAFF\"} size=\"2x\"/>\n                    <span style={{ marginTop: 10 }}>\n                        {userObj.displayName \n                            ? `${userObj.displayName}'s Profile` \n                            : \"Profile\"}\n                    </span>\n                </Link>\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default Navigation;","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Auth from \"routes/Auth\";\nimport Home from \"routes/Home\";\nimport Profile from \"routes/Profile\";\nimport Navigation from \"components/Navigation\";\n\nconst AppRouter = ({ refreshUser, isLoggedIn, userObj }) => {\n    return (\n        <Router>\n            {isLoggedIn &&  <Navigation userObj={userObj}/>}\n            <Switch>\n                <>\n                { isLoggedIn ? (\n                    <div\n                        style={{\n                            maxWidth: 890,\n                            width: \"100%\",\n                            margin: \"0 auto\",\n                            marginTop: 80,\n                            display: \"flex\",\n                            justifyContent: \"center\"\n                        }}\n                    >\n                        <Route exact path=\"/\">\n                            <Home userObj={userObj}/>\n                        </Route>\n                        <Route exact path=\"/profile\">\n                            <Profile userObj={userObj} refreshUser={refreshUser}/>\n                        </Route>\n                    </div>\n                ) : (\n                    <>\n                        <Route exact path=\"/\">\n                            <Auth/>\n                        </Route>\n                    </> \n                )};\n                </>\n            </Switch>\n        </Router>\n    );\n};\n\nexport default AppRouter;","import React, { useEffect, useState } from \"react\";\nimport AppRouter from \"components/Router\";\nimport { authService } from \"fbInstance\";\n\n\nfunction App() {\n  const [init, setInit] = useState(false);\n  const [userObj, setUserObj] = useState(null);\n\n  useEffect(() => {\n    authService.onAuthStateChanged((user) => {\n      if(user){\n        setUserObj({\n          displayName: user.displayName,\n          uid: user.uid,\n          updateProfile: (args) => user.updateProfile(args)\n        });\n      } else {\n        setUserObj(null);\n      }\n      setInit(true);\n    });\n  }, []);\n\n  const refreshUser = () => {\n    const user = authService.currentUser;\n    setUserObj({\n      displayName: user.displayName,\n      uid: user.uid,\n      updateProfile: (args) => user.updateProfile(args)\n    });\n  };\n\n  \n  return (\n    <>\n    { init ? (\n      <AppRouter\n        refreshUser={refreshUser} \n        isLoggedIn={Boolean(userObj)}\n        userObj={userObj}\n      />\n      ) : (\n        \"initializing...\"\n      )}\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport \"./style.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}